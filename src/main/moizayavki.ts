
import { MainContext} from '../../types/types'
import {getLocalPhone, getUserName} from '../authorize'
import {zayavkaToData, dataToMessage} from '../common/requestConverter'
import {saveRequest} from '../common/saveRequest'
import Edit from '../edit'

import Notify from '../common/notify'
// import { ABReqest } from '../../types/types';

const TX_NOTIFY_UPDATE = "üíä –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:"
const TX_NOTIFY_CANCELED ="‚õîÔ∏è –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞:"

const TX_NO_ZAYAVOK = '–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞—è–≤–æ–∫'
const TX_MY_ZAYAVKI = "–ó–∞—è–≤–∫–∏"
const TX_PAGE = "—Å—Ç—Ä–∞–Ω–∏—Ü–∞"
const TX_BTN_CANCEL = "–û—Ç–º–µ–Ω–∏—Ç—å"
const TX_BTN_EDIT = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"

const TX_CONFIRN = "–¢–æ—á–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º –∑–∞—è–≤–∫—É?"
const TX_BTN_YES = "–î–∞"
const TX_BTN_NO = "–ù–µ—Ç"

const COUNT_PER_PAGE = 3
const TX_BTN_NEXT_PAGE = "–°—Ç—Ä–∞–Ω–∏—Ü–∞"
const TX_BTN_PREV_PAGE = "–°—Ç—Ä–∞–Ω–∏—Ü–∞"

const TX_NEXT_MESSAGE = "–ü—Ä–æ—à–ª—ã–µ –∑–∞—è–≤–∫–∏"
const TX_PREV_MESSAGE = "–ë–æ–ª–µ–µ –Ω–æ–≤—ã–µ"

const TX_EDIT_CONFIRMED = "‚úÖ *–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞*. –û—Ç–ø—Ä–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É";
const TX_EDIT_CANCELED = "‚õîÔ∏è *–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*. –û—Ç–ø—Ä–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É";

// const TX_INITIAL_MESSAGE = '‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ *–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –º–µ–Ω–¥–∂–µ—Ä–∞*:'
// page = 1,2,3 ...

const MoiZayavki = async (msg:any, c: MainContext, page: number, end:()=>any, newZayavkiData?:any) => {

    const objectsTable = await c.tableUI.getList('–û–±—ä–µ–∫—Ç—ã', ['Auto #', '–ù–∞–∑–≤–∞–Ω–∏–µ'])

    // –∫—ç—à–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    let zayavkiData: any

    if(newZayavkiData)
        zayavkiData = newZayavkiData
    else 
        zayavkiData = await c.tableUI.getList('–ó–∞—è–≤–∫–∏', 
        ['#', '–¢–∏–ø', '–î–æ—Å—Ç–∞–≤–∫–∞', '–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è', '–°—Ç–∞—Ç—É—Å', 'C–æ—Ç—Ä—É–¥–Ω–∏–∫', '–û–±—ä–µ–∫—Ç A', '–û–±—ä–µ–∫—Ç B', 
        '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–î–∞—Ç–∞ —Å–æ–∑–¥.', '–î–∞—Ç–∞ –∏–∑–º.'])
  

    // —Ä–µ–≤–µ—Ä—Å –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –º–∞—Å—Å–∏–≤–∞
    for(const key in zayavkiData) {
        zayavkiData[key] = zayavkiData[key].reverse()
    }

    // console.log(zayavkiData)
    const messagesIds:any = {}

    const showNavigationButton = async (type:'next' | 'prev', page: number, totalItems: number)=>{

        const newPage:number = type === 'next'? Number(page)+1 : Number(page)-1
        const a = totalItems-1
        const b = COUNT_PER_PAGE
        const totalPages = (a+b-a%b)/b

        // console.log(totalPages)
        // console.log('–Ω–æ–≤–∞—è —Å—Ä–∞–Ω–∏—Ü–∞: ' + newPage)
        // console.log('–≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ' + totalPages)

        if(newPage<1) return
        if(newPage>totalPages) return

        const opts = {
            reply_markup: { inline_keyboard: [ 
                [ { 
                    text: type === 'next'? 
                        TX_BTN_NEXT_PAGE + " " + newPage + " >>": 
                        "<< "+TX_BTN_PREV_PAGE + " " + newPage,
                    callback_data: 'page_' + newPage //id zayavki
                }] 
            ]},
            mark_to_remove: true
        }

        await c.botUI.message(msg, type === 'next'? TX_NEXT_MESSAGE : TX_PREV_MESSAGE, opts)
 
    }

    c.botUI.context(msg, async ()=>{

        const user = getLocalPhone(getUserName(msg)) 
        // console.log(Array.from(zayavkiData['C–æ—Ç—Ä—É–¥–Ω–∏–∫'].entries()))
        // console.log(zayavkiData['C–æ—Ç—Ä—É–¥–Ω–∏–∫'])
        // console.log(String(user))

        if (zayavkiData['C–æ—Ç—Ä—É–¥–Ω–∏–∫'].indexOf(String(user)) === -1) {
            await c.botUI.message(msg, TX_NO_ZAYAVOK, {mark_to_remove: true})
            return
        }
        
        await c.botUI.message(msg, TX_MY_ZAYAVKI + " (" + TX_PAGE  + " " + page + ")", {mark_to_remove: true})
        // await c.botUI.
         
        await showNavigationButton('prev', page, zayavkiData['#'].length)

        // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏, –≥–¥–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ = —ç—Ç–æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        for (const [i, phone] of zayavkiData['C–æ—Ç—Ä—É–¥–Ω–∏–∫'].entries()) {
            
            // const ii = zayavkiData['C–æ—Ç—Ä—É–¥–Ω–∏–∫'].length - 1 - i
            // console.log(ii)
            //  –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –û—Ç–º–µ–Ω–µ–Ω

            const b = COUNT_PER_PAGE
            if(i<(page-1) * b) continue
            if(i>=page * b ) continue

            if( phone === user 
                && zayavkiData['–°—Ç–∞—Ç—É—Å'][i] !== '–û—Ç–º–µ–Ω–∞'
                && zayavkiData['–°—Ç–∞—Ç—É—Å'][i] !== '–û–±—ä–µ–∫—Ç'
                && zayavkiData['–°—Ç–∞—Ç—É—Å'][i] !== '–°–∫–ª–∞–¥'
            ) {
                const opts = {
                    reply_markup: { inline_keyboard: [[]]},
                    mark_to_remove: true
                }
                const btns:any = opts.reply_markup.inline_keyboard[0]

                // —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                if(zayavkiData['–°—Ç–∞—Ç—É—Å'][i] === '–û–±—Ä–∞–±–æ—Ç–∫–∞')
                    btns.push({ 
                        text: TX_BTN_EDIT, 
                        callback_data: 'edit' + '_' + zayavkiData['#'][i] + '_' + i, //_id_i //–∏–Ω–¥–µ–∫—Å
                    })

                btns.push({ 
                    text: TX_BTN_CANCEL, 
                    callback_data: 'cancel' + '_' + zayavkiData['#'][i] + '_' + i,
                })

                const nmsg = await c.botUI.message(msg, dataToMessage(zayavkaToData(i, zayavkiData), objectsTable), opts)
                messagesIds[zayavkiData['#'][i]] = nmsg.message_id
            } else {
                await c.botUI.message(msg, dataToMessage(zayavkaToData(i, zayavkiData), objectsTable), {mark_to_remove: true})
            }

        }

        await showNavigationButton('next', page, zayavkiData['#'].length)
        
    },{ 
        callback_query:
        async (query:any)=>{
            const split = query.data.split('_')
            const type = split[0]
            const val1 = split[1] //id 
            const val2 = split[2] //ind

            if(type === 'edit') {

                c.botUI.deleteAllMarked(msg)
                // –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º c.data - –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –º–æ–¥–µ–ª—å –∑–∞—è–≤–∫–∏, val2 - index
                c.data[msg.chat.id] = zayavkaToData(val2, zayavkiData)

                Edit(msg, c, async (isEdited:Boolean)=>{
                    if(isEdited) {
                        // console.log('SAVE')
                        await saveRequest(msg, c, val1)
                        await c.botUI.message(msg, TX_EDIT_CONFIRMED)
                        // —É–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                        const usersTable = await c.tableUI.getList('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', ['#', '–§–ò–û', '–†–æ–ª—å', 'ChatId'])
                        await Notify(msg, c, TX_NOTIFY_UPDATE + '\n' 
                            + dataToMessage(c.data[msg.chat.id], objectsTable, true, usersTable), usersTable, null) 
                        await end()
                    } else {
                        MoiZayavki(msg, c, page, end, newZayavkiData) 
                    }
                }, false) // –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π confirmation —Å—Ä–∞–∑—É —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


            } else if(type === 'cancel') {
                
                c.botUI.context(msg, async ()=>{

                    c.botUI.deleteAllMarked(msg)
                    c.data[msg.chat.id] = zayavkaToData(val2, zayavkiData)
                    await c.botUI.message(msg, dataToMessage(c.data[msg.chat.id], objectsTable), {mark_to_remove: true})

                    const opts = {
                        reply_markup: { inline_keyboard: [ 
                            [ { 
                                text: TX_BTN_YES, 
                                callback_data: 'yes_' + val1 + '_' + val2, 
                            } ,
                            { 
                                text: TX_BTN_NO, 
                                callback_data: 'no', 
                            } ] 
                        ]},
                        mark_to_remove: true
                    }
    
                    await c.botUI.message(msg, TX_CONFIRN, opts)

                },{ 
                    callback_query:
                    async (query:any)=>{    
                        
                        const split = query.data.split('_')
                        const type = split[0]
                        const id = split[1]
                        const ind = split[2]
                        
                        if(type === 'yes') {

                            c.botUI.deleteAllMarked(msg)
                            
                            c.data[msg.chat.id].status = '–û—Ç–º–µ–Ω–∞'
                            await saveRequest(msg, c, id, true) //save only status

                            zayavkiData['–°—Ç–∞—Ç—É—Å'][ind] = '–û—Ç–º–µ–Ω–∞'
                            await c.botUI.message(msg, dataToMessage(zayavkaToData(ind, zayavkiData), objectsTable))
                            await c.botUI.message(msg, TX_EDIT_CANCELED)

                            const usersTable = await c.tableUI.getList('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', ['#', '–§–ò–û', '–†–æ–ª—å', 'ChatId'])
                            await Notify(msg, c, TX_NOTIFY_CANCELED + '\n' 
                                + dataToMessage(c.data[msg.chat.id], objectsTable), usersTable, null) //–ø–∏—à–µ–º –º–µ–Ω–¥–∂–µ—Ä—É

                            await end()

                        } else {
                            c.botUI.deleteAllMarked(msg)
                            MoiZayavki(msg, c, page, end)
                        }                     
                    }
                })

                
                // %%% –æ—Ç–º–µ–Ω—è–µ–º –∑–∞—è–≤–∫—É –∏ —É–¥–∞–ª—è–µ–º –µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                
            } else if(type === 'page') { 
                
                c.botUI.deleteAllMarked(msg)
                MoiZayavki(msg, c, val1, end)
            }
        }
    })
}

export default MoiZayavki