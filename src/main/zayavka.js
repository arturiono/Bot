"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const authorize_1 = require("../authorize");
const requestConverter_1 = require("../common/requestConverter");
const confirm_1 = __importDefault(require("../confirm"));
const notify_1 = __importDefault(require("../common/notify"));
const saveRequest_1 = require("../common/saveRequest");
const TX_NEW_ZAYAVKA_MNG = "‚úÖ üîúüè¢ –ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ —Å–∫–ª–∞–¥–∞:\n";
const TX_REQEST_CONFIRMED = "‚úÖ *–ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ —Å–∫–ª–∞–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞*. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑—è–≤–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é /moizayavki";
const TX_INITIAL_MESSAGE = "*–ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ —Å–∫–ª–∞–¥–∞*";
const TX_CONFLICT = "*‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–µ–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∑–∞–∫–∞–∑–∞*. –î—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –∑–∞–∫–∞–∑–∞–ª –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–µ–º–µ–Ω—Ç. \n" +
    "*–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏/–∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã*. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä—Ç–∏—Ç–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ.";
exports.default = (msg, c, end) => __awaiter(void 0, void 0, void 0, function* () {
    yield c.botUI.message(msg, TX_INITIAL_MESSAGE);
    c.data[msg.chat.id] = {
        id: 'Null',
        type: '–°–æ —Å–∫–ª–∞–¥–∞',
        from: '0',
        to: '1',
        status: '–û–±—Ä–∞–±–æ—Ç–∫–∞',
        delivery: '–ù–µ—Ç',
        dateTime: '–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏',
        tools: { "2": "–°–ü–ï–¶-3447", "3": "BORT BNG-2000X" },
        rashodniki: { "1": { "name": "–õ–µ–∑–≤–∏—è | –ü—Ä—è–º—ã –µ", "count": 100 }, "2": { "name": "–õ–µ–∑–≤–∏—è | –õ–µ–∑–≤–∏—è –ö—Ä—é—á–æ–∫", "count": 100 } },
        comment: 'Null',
        user: (0, authorize_1.getLocalPhone)((0, authorize_1.getUserName)(msg)),
        dateCreated: 'Null'
    };
    // –ö–æ–Ω–µ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π –≤—ã–¥–µ–ª–µ–Ω–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    let ConfirmedByUser = () => __awaiter(void 0, void 0, void 0, function* () {
        // 1. –ø—Ä–æ–≤–µ—Ä—è–µ–º tools, —á—Ç–æ–±—ã –∏—Ö –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π
        const toolsData = yield c.tableUI.getList('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', ['Auto #', '–°—Ç–∞—Ç—É—Å', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–û–±—ä–µ–∫—Ç', '–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ', '–û—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–ó–∞—è–≤–∫–∞']);
        let conflicted = false;
        for (const toolId in c.data[msg.chat.id].tools) {
            const ind = toolsData['Auto #'].indexOf(toolId);
            if (toolsData['–°—Ç–∞—Ç—É—Å'][ind] !== '–°–∫–ª–∞–¥') {
                let tx = '‚õîÔ∏è' + toolsData['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'][ind] + ' | ' + toolsData['–û–ø–∏—Å–∞–Ω–∏–µ'][ind] + '\n' +
                    '–£–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–∞–≤–∞–ª: ' + toolsData['–û—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π'][ind];
                yield c.botUI.message(msg, tx);
                conflicted = true;
                // —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                delete c.data[msg.chat.id].tools[toolId];
            }
        }
        // 2. –ø—Ä–æ–≤–µ—Ä—è–µ–º rashodniki, —á—Ç–æ–±—ã –∏—Ö –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π
        const rashodniki = yield c.tableUI.getList('–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏', ['Auto #', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ò–∑–º–µ—Ä–µ–Ω–∏–µ', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–í–∞—Ä–∏–∞–Ω—Ç', '–§–æ—Ç–æ', '–ú–µ—Å—Ç–æ']);
        for (const toolId in c.data[msg.chat.id].rashodniki) {
            const ind = rashodniki['Auto #'].indexOf(toolId);
            if (ind !== -1 && rashodniki['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'][ind]) {
                const a = Number(rashodniki['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'][ind]);
                const b = c.data[msg.chat.id].rashodniki[toolId].count;
                const dif = a - b;
                if (dif < 0) {
                    let tx = '‚õîÔ∏è' + rashodniki['–ù–∞–∑–≤–∞–Ω–∏–µ'][ind] + ' | ' + rashodniki['–í–∞—Ä–∏–∞–Ω—Ç'][ind] + '\n' +
                        '–ú–∞–∫—Å–∏–º–∞–æ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ: ' + a + rashodniki['–ò–∑–º–µ—Ä–µ–Ω–∏–µ'][ind];
                    yield c.botUI.message(msg, tx);
                    const newCount = c.data[msg.chat.id].rashodniki[toolId].count + dif;
                    c.data[msg.chat.id].rashodniki[toolId].count = newCount; //–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 0
                    if (newCount === 0) {
                        delete c.data[msg.chat.id].rashodniki[toolId];
                    }
                    conflicted = true;
                }
            }
        }
        if (conflicted) {
            yield c.botUI.message(msg, TX_CONFLICT);
            // —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º confirmed –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
            yield (0, confirm_1.default)(msg, c, () => __awaiter(void 0, void 0, void 0, function* () {
                ConfirmedByUser();
            }));
            return;
        }
        // - - - - - - - - - - - - - - -
        // –ï—Å–æ–ª–∏ –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ
        yield (0, saveRequest_1.saveRequest)(msg, c);
        yield c.botUI.message(msg, TX_REQEST_CONFIRMED);
        // –ø–∏—à–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
        const usersTable = yield c.tableUI.getList('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', ['#', '–§–ò–û', '–†–æ–ª—å', 'ChatId']);
        yield (0, notify_1.default)(msg, c, TX_NEW_ZAYAVKA_MNG + (0, requestConverter_1.dataToMessage)(c.data[msg.chat.id], true, usersTable), usersTable, null); //–ø–∏—à–µ–º –º–µ–Ω–¥–∂–µ—Ä—É
        end();
    });
    // await Object(msg, c, false, async ()=>{
    //     await Dostavka(msg, c, false, async ()=>{
    //         await Time(msg, c, false, async ()=>{ 
    //             await Tools(msg, c, false, async ()=>{  // —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –∑–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
    //                 await Rashodniki(msg, c, false, true, async ()=>{
    //                     await Comment(msg, c, false, async ()=>{  
    yield (0, confirm_1.default)(msg, c, () => __awaiter(void 0, void 0, void 0, function* () {
        ConfirmedByUser();
    }));
    //                     })
    //                 })
    //             })
    //         })
    //     })
    // })
});
