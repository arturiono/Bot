
import {MainContext} from '../../types/types'
import {zayavkaToData, dataToMessage} from '../common/requestConverter'
import {saveRequest} from '../common/saveRequest'
import YesNo from '../yesno' 

// import Confirm from '../confirm'
import Edit from '../edit'

import Notify from '../common/notify'
// import { ABReqest } from '../../types/types';

const TX_NO_ZAYAVOK = '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫'
// const TX_MY_ZAYAVKI = "–ó–∞—è–≤–∫–∏"
// const TX_PAGE = "—Å—Ç—Ä–∞–Ω–∏—Ü–∞"
const TX_BTN_STATUS = "C—Ç–∞—Ç—É—Å"
const TX_BTN_EDIT = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"

const TX_NAVIAGTION = '–ù–∞–≤–∏–≥–∞—Ü–∏—è'
const TX_BUTTON_BACK = '<< –í–µ—Ä–Ω—É—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É'
const TX_SELECT_STATUS = "–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞:"

const TX_CONFIRN_CANCEL = "*–¢–æ—á–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º?*\n–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
const TX_CONFIRN_OBJ = "*–¢–æ—á–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ –æ–±—å–µ–∫—Ç–µ?*\n–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞, –∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –º–µ—Ç–µ—Ä–∏–∞–ª—ã –±—É–¥—É –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ–±—ä–µ–∫—Ç–µ"
// const TX_BTN_YES = "–î–∞"
// const TX_BTN_NO = "–ù–µ—Ç"

const STATUS_OBRABOTKA = "–û–±—Ä–∞–±–æ—Ç–∫–∞"
const STATUS_SOBRAN = "–°–æ–±—Ä–∞–Ω"
const STATUS_DOSTAVKA = "–î–æ—Å—Ç–∞–≤–∫–∞"
const STATUS_OBJ = "–û–±—ä–µ–∫—Ç"
const STATUS_SKLAD = "–°–∫–ª–∞–¥"
const STATUS_CANCEL = "–û—Ç–º–µ–Ω–∞"

const TX_EDIT_CONFIRMED = "üíä *–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞*. –û—Ç–ø—Ä–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–∞—Å—Ç–µ—Ä—É";
const TX_EDIT_CONFIRMED_INFO = "üíä –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –º–µ–Ω–¥–∂–µ—Ä–æ–º:";
const TX_EDIT_CANCELED = "‚õîÔ∏è *–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*. –û—Ç–ø—Ä–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–∞—Å—Ç–µ—Ä—É";
const TX_EDIT_CANCELED_IMFO = "‚õîÔ∏è –¢–≤–æ—è *–∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞* –º–µ–Ω–¥–∂–µ—Ä–æ–º:";
const TX_EDIT_STATUS = "üöÄ *C—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω*. –û—Ç–ø—Ä–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–∞—Å—Ç–µ—Ä—É";
const TX_EDIT_STATUS_INFO = "üöÄ C—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –º–µ–Ω–¥–∂–µ—Ä–æ–º:";

// –ó–∞–¥–∞—á–∏
// 1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–≤—Ç–∫–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏
// 1.a –ó–Ω–∞—Ç—å –∫—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É

// const TX_INITIAL_MESSAGE = '‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ *–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –º–µ–Ω–¥–∂–µ—Ä–∞*:'
// page = 1,2,3 ...


interface cashedData {
    zayavkiTable: any
    usersTable: any
    objectsTable: any
}

const Manager = async (msg:any, c: MainContext, end:()=>any, cashedData?:cashedData ) => {

    let zayavkiTable: any
    let usersTable: any 
    let objectsTable: any
    let newCashedData: cashedData

    if(cashedData) {

        zayavkiTable = cashedData.zayavkiTable
        usersTable = cashedData.usersTable
        objectsTable = cashedData.objectsTable

        newCashedData = cashedData

    } else {

        zayavkiTable = await c.tableUI.getList('–ó–∞—è–≤–∫–∏', [
            '#', '–¢–∏–ø', '–î–æ—Å—Ç–∞–≤–∫–∞', '–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è', '–°—Ç–∞—Ç—É—Å', 'C–æ—Ç—Ä—É–¥–Ω–∏–∫', '–û–±—ä–µ–∫—Ç A', '–û–±—ä–µ–∫—Ç B', 
            '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–î–∞—Ç–∞ —Å–æ–∑–¥.', '–î–∞—Ç–∞ –∏–∑–º.'
        ])
        
        usersTable = await c.tableUI.getList('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', [
            '#', '–§–ò–û', '–†–æ–ª—å', 'ChatId'
        ])

        objectsTable = await c.tableUI.getList('–û–±—å–µ–∫—Ç—ã', ['Auto #', '–ù–∞–∑–≤–∞–Ω–∏–µ'])

        newCashedData = {
            zayavkiTable,
            usersTable,
            objectsTable
        }

    }

    
    // // —Ä–µ–≤–µ—Ä—Å –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –º–∞—Å—Å–∏–≤–∞
    // for(const key in zayavkiTable) {
    //     zayavkiTable[key] = zayavkiTable[key].reverse()
    // }

    // console.log(zayavkiTable)
    const messagesIds:any = {}

    c.botUI.context(msg, async ()=>{

        await c.botUI.deleteAllMarked(msg)

        let found = false
        for (const [i, phone] of zayavkiTable['C–æ—Ç—Ä—É–¥–Ω–∏–∫'].entries()) {
            
            // —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            if( zayavkiTable['–°—Ç–∞—Ç—É—Å'][i] !== '–û—Ç–º–µ–Ω–∞'
                && zayavkiTable['–°—Ç–∞—Ç—É—Å'][i] !== '–û–±—ä–µ–∫—Ç'
                && zayavkiTable['–°—Ç–∞—Ç—É—Å'][i] !== '–°–∫–ª–∞–¥'
            ) {
                found = true
                const opts = {
                    reply_markup: { inline_keyboard: [ 
                        []
                    ]},
                    mark_to_remove: true
                }
                const btns:any = opts.reply_markup.inline_keyboard[0]
                
                // '–û—Ç–º–µ–Ω–∏—Ç—å', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'
                btns.push({ 
                    text: TX_BTN_STATUS, 
                    callback_data: 'status' + '_' + zayavkiTable['#'][i] + '_' + i,
                })

                btns.push ({
                    text: TX_BTN_EDIT, 
                    callback_data: 'edit' + '_' + zayavkiTable['#'][i] + '_' + i,  //_id_i //–∏–Ω–¥–µ–∫—Å
                })
     
                let dt:any = zayavkaToData(i, zayavkiTable)
                let zayavka = dataToMessage(dt, objectsTable, true, usersTable)

                const nmsg = await c.botUI.message(msg, zayavka , opts)
                messagesIds[zayavkiTable['#'][i]] = nmsg.message_id
            } 

        }

        if(!found) await c.botUI.message(msg, TX_NO_ZAYAVOK, {mark_to_remove: true})
        
    },{ 
        callback_query:
        async (query:any)=>{
            const split = query.data.split('_')
            const type = split[0]
            const id = split[1] //id 
            const ind = split[2] //ind

            if(type === 'edit') {

                c.botUI.deleteAllMarked(msg)

                // –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º c.data - –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –º–æ–¥–µ–ª—å –∑–∞—è–≤–∫–∏
                c.data[msg.chat.id] = zayavkaToData(ind, zayavkiTable)
                
                // %%% –í–ú–ï–°–¢–û Confirm startFromEdit –ø–∏—à–µ–º –Ω–æ—Ä–º–∞–ª—å—Ç–Ω—É—é –ª–æ–≥–∏–∫—É –≤–º–µ—Å—Ç–æ Confirm
                // %%% —Ç–æ–∂–µ —Å–∞–º–æ–µ –¥–ª—è moizayavki
                // Cofirm2
                // - –≤–µ—Ä–Ω—É—Ç—Å—è
                // - 

                await Edit(msg, c, async (isEdited:Boolean)=>{

                    if(isEdited) {
                        await saveRequest(msg, c, id)
                        await c.botUI.message(msg, TX_EDIT_CONFIRMED)
                        // —É–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
                        let usersTable = await c.tableUI.getList('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', ['#', '–†–æ–ª—å', 'ChatId'])
                        await Notify(msg, c, TX_EDIT_CONFIRMED_INFO + '\n' 
                            + dataToMessage(c.data[msg.chat.id], objectsTable), usersTable, c.data[msg.chat.id].user) //–ø–∏—à–µ–º –º–∞—Å—Ç–µ—Ä—É
                    } else {
                        // console.log('–í–ï–†–ù–£–¢–¨–°–Ø HAPPEN')
                        await Manager(msg, c, end, newCashedData) 
                    }

                }, false, usersTable) // –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π confirmation —Å—Ä–∞–∑—É —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

            } else if(type === 'status') {

                c.botUI.context(msg, async ()=>{

                    c.botUI.deleteAllMarked(msg)
                    c.data[msg.chat.id] = zayavkaToData(ind, zayavkiTable)
                    await c.botUI.message(msg, dataToMessage(c.data[msg.chat.id], objectsTable, true, usersTable), {mark_to_remove: true})

                    const opts = {
                        reply_markup: { inline_keyboard: []}, mark_to_remove: true
                    }

                    const btns:any = opts.reply_markup.inline_keyboard
                    const z = c.data[msg.chat.id]

                    let obrabotka = ()=>{
                        if(z.status !== STATUS_OBRABOTKA)
                            btns.push([{ 
                                text: STATUS_OBRABOTKA, 
                                callback_data: STATUS_OBRABOTKA + '_' + zayavkiTable['#'][ind] + '_' + ind,
                            }])
                    }

                    let sobran = ()=>{
                        if(z.delivery === '–ù–µ—Ç' && z.status !== STATUS_SOBRAN)
                            btns.push ([{
                                text: STATUS_SOBRAN, 
                                callback_data: STATUS_SOBRAN + '_' + zayavkiTable['#'][ind] + '_' + ind,
                            }])
                    }

                    let dostavka = ()=>{
                        if(z.delivery === '–î–∞' && z.status !== STATUS_DOSTAVKA)
                            btns.push ([{
                                text: STATUS_DOSTAVKA, 
                                callback_data: STATUS_DOSTAVKA + '_' + zayavkiTable['#'][ind] + '_' + ind,
                            }])
                    }

                    let object = ()=>{
                        // if(z.status !== STATUS_OBJ) //–≤ —Ç–µ–∫—â–µ–π –ª–æ–≥–∏–∫–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–¥–Ω—è–µ—Ç—å—Å—è
                            btns.push ([{
                                text: STATUS_OBJ, 
                                callback_data: STATUS_OBJ + '_' + zayavkiTable['#'][ind] + '_' + ind,
                            }])
                    }

                    let sklad = ()=>{
                        // if(z.status !== STATUS_SKLAD) //–≤ —Ç–µ–∫—â–µ–π –ª–æ–≥–∏–∫–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–¥–Ω—è–µ—Ç—å—Å—è
                            btns.push ([{
                                text: STATUS_SKLAD, 
                                callback_data: STATUS_SKLAD + '_' + zayavkiTable['#'][ind] + '_' + ind,
                            }])
                    }

                    let otmena = ()=>{
                        // if(z.status !== STATUS_CANCEL) //–≤ —Ç–µ–∫—â–µ–π –ª–æ–≥–∏–∫–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–¥–Ω—è–µ—Ç—å—Å—è
                            btns.push ([{
                                text: STATUS_CANCEL,
                                callback_data: STATUS_CANCEL + '_' + zayavkiTable['#'][ind] + '_' + ind,
                            }])
                    }

                    // type = –°–æ —Å–∫–ª–∞–¥–∞ (–∫–Ω–æ–ø–∫–∏)
                    // "–û–±—Ä–∞–±–æ—Ç–∫–∞", "–°–æ–±—Ä–∞–Ω", ("–î–æ—Å—Ç–∞–≤–∫–∞"), "–û–±—ä–µ–∫—Ç"

                    // type = –í–æ–∑–≤—Ä–∞—Ç
                    // "–û–±—Ä–∞–±–æ—Ç–∫–∞", ("–î–æ—Å—Ç–∞–≤–∫–∞"), "–°–∫–ª–∞–¥"

                    // type =  –ú–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ 
                    // "–û–±—Ä–∞–±–æ—Ç–∫–∞", ("–î–æ—Å—Ç–∞–≤–∫–∞"), "–û–±—ä–µ–∫—Ç"

                    // type = –°–≤–æ–±–æ–¥–Ω–∞—è
                    // "–û–±—Ä–∞–±–æ—Ç–∫–∞" -> "–°–æ–±—Ä–∞–Ω" -> "–î–æ—Å—Ç–∞–≤–∫–∞" -> "–û–±—ä–µ–∫—Ç" -> "–°–∫–ª–∞–¥"


                    if(z.type === '–°–æ —Å–∫–ª–∞–¥–∞') {
                        obrabotka()
                        sobran()
                        dostavka()
                        object()
                        otmena()
                    } else if(z.type === '–í–æ–∑–≤—Ä–∞—Ç') {
                        obrabotka()
                        dostavka()
                        sklad()
                        otmena()
                    } else if(z.type === '–ú–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏') {
                        obrabotka()
                        dostavka()
                        object()
                        otmena()
                    } else if(z.type === '–°–≤–æ–±–æ–¥–Ω–∞—è') {
                        obrabotka()
                        sobran()
                        dostavka()
                        object()
                        sklad()
                        otmena()
                    }
                    
                    // —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await c.botUI.message(msg, TX_SELECT_STATUS, opts)

                    const opts2 = {
                        reply_markup: { inline_keyboard: [[
                            {
                                text: TX_BUTTON_BACK, 
                                callback_data: 'back',
                            }
                        ]]}, mark_to_remove: true
                    }
                    await c.botUI.message(msg, TX_NAVIAGTION, opts2)


                },{ 
                    callback_query:
                    async (query:any)=>{    
                        
                        const split = query.data.split('_')
                        const type = split[0]
                        const id = split[1]
                        const ind = split[2]
                        
                        if(type === 'back') {
                            
                            c.botUI.deleteAllMarked(msg)
                            await Manager(msg, c, end, newCashedData)

                            // const STATUS_OBRABOTKA = "–û–±—Ä–∞–±–æ—Ç–∫–∞"
                            // const STATUS_SOBRAN = "–°–æ–±—Ä–∞–Ω"
                            // const STATUS_DOSTAVKA = "–î–æ—Å—Ç–∞–≤–∫–∞"
                            // const STATUS_OBJ = "–û–±—ä–µ–∫—Ç"
                            // const STATUS_SKLAD = "–°–∫–ª–∞–¥"
                            // const STATUS_CANCEL = "–û—Ç–º–µ–Ω–∞"

                        } else if(type === STATUS_OBRABOTKA || type === STATUS_SOBRAN 
                               || type === STATUS_DOSTAVKA || type === STATUS_OBJ || type === STATUS_SKLAD
                        ) {

                            let save = async ()=>{
                                c.botUI.deleteAllMarked(msg)

                                c.data[msg.chat.id].status = type
                                await saveRequest(msg, c, id, true) //save only status
                                
                                // –µ—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ –∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏, —Ç–æ —Å—Ä–∞–∑—É –º–µ–Ω—è–µ–º —Å–∞—Ç—É—Å –≤ –ö–≠–® (–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É —Å–µ—Ä–≤–µ—Ä–∞)
                                zayavkiTable['–°—Ç–∞—Ç—É—Å'][ind] = type
                                await c.botUI.message(msg, dataToMessage(zayavkaToData(ind, zayavkiTable), objectsTable, true, usersTable))
                                await c.botUI.message(msg, TX_EDIT_STATUS)

                                //–ø–∏—à–µ–º –º–∞—Å—Ç–µ—Ä—É
                                await Notify(msg, c, TX_EDIT_STATUS_INFO + '\n' + 
                                    dataToMessage(c.data[msg.chat.id], objectsTable), usersTable, c.data[msg.chat.id].user) 

                            }

                            // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å–∫–ª–∞–¥ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞ –æ–±—ä–µ–∫—Ç–µ - –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã —Å—Ç–∞—Ç—É—Å—ã –≤ —Ç–µ–∫—É—â–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
                            if(type === STATUS_OBJ || type === STATUS_SKLAD) {

                                c.botUI.deleteAllMarked(msg)
                                c.data[msg.chat.id] = zayavkaToData(ind, zayavkiTable)
                                await c.botUI.message(msg, dataToMessage(c.data[msg.chat.id], objectsTable, true, usersTable), {mark_to_remove: true})

                                await YesNo(msg, c, TX_CONFIRN_OBJ, async ()=>{
                                    await save()
                                }, async ()=>{
                                    await Manager(msg, c, end, newCashedData)
                                })

                            } else {
                                await save()
                            }
                            

                        } else if(type === STATUS_CANCEL) {
                
                            c.botUI.deleteAllMarked(msg)
                            c.data[msg.chat.id] = zayavkaToData(ind, zayavkiTable)
                            await c.botUI.message(msg, dataToMessage(c.data[msg.chat.id], objectsTable, true, usersTable), {mark_to_remove: true})

                            await YesNo(msg, c, TX_CONFIRN_CANCEL, async ()=>{

                                c.botUI.deleteAllMarked(msg)

                                c.data[msg.chat.id].status = '–û—Ç–º–µ–Ω–∞'
                                await saveRequest(msg, c, id, true) //save only status
                                
                                zayavkiTable['–°—Ç–∞—Ç—É—Å'][ind] = '–û—Ç–º–µ–Ω–∞'
                                await c.botUI.message(msg, dataToMessage(zayavkaToData(ind, zayavkiTable), objectsTable, true, usersTable))
                                await c.botUI.message(msg, TX_EDIT_CANCELED)

                                //–ø–∏—à–µ–º –º–∞—Å—Ç–µ—Ä—É
                                await Notify(msg, c, TX_EDIT_CANCELED_IMFO + '\n' + 
                                    dataToMessage(c.data[msg.chat.id], objectsTable), usersTable, c.data[msg.chat.id].user) 

                            }, async ()=>{

                                c.botUI.deleteAllMarked(msg)
                                Manager(msg, c, end, newCashedData)

                            })
                            
                        }                     
                    }
                })

            }
            
        }
    })
}

export default Manager