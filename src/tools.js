"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const search_1 = require("./common/search");
const TX_INITIAL_MESSAGE = '*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*:';
const TX_SEARCH_MESSAGE = '–î–ª—è üîé –ø–æ–∏—Å–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è *–ø–∏—à–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏*';
const TX_INITIAL_MESSAGE_EDIT = '*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*:';
const TX_SEARCH_NORESULT = "–ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
const TX_END_MESSAGE = "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ";
const TX_BUTTON_ADD = "–î–æ–±–∞–≤–∏—Ç—å";
const TX_BUTTON_PHOTO = "–§–æ—Ç–æ";
const TX_BUTTON_DELETE = "–£–¥–∞–ª–∏—Ç—å";
const TX_BUTTON_END = "–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ >>";
const TX_BUTTON_TOOLS_LIST = "–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤";
const TX_BUTTON_EDIT_END = "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ >>";
const TX_FOUND_1 = '–ù–∞–π–¥–µ–Ω–æ ';
const TX_FOUND_2 = ' (–ª–∏–º–∏—Ç ';
const TX_FOUND_3 = ')';
const TX_TOOL = '–ò–Ω—Å—Ä—É–º–µ–Ω—Ç: ';
const TX_END_CONFIRM_REQUEST = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞?";
const TX_BUTTON_CONFIRM = '–î–∞';
const TX_BUTTON_NOT_CONFIRM = '–ù–µ—Ç';
const TX_END_CONFIRMED = "–ü–æ–Ω—è–ª, *–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*";
const TX_END_NOT_CONFIRMED = "–ü—Ä–æ–¥–æ–ª–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ";
// –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤—ã–≤–æ–¥ –ø–æ–∏—Å–∫–∞ –¥–æ 7 —à—Ç
const SEARCH_LIMIT = 7;
exports.default = (msg, c, editMode, end) => __awaiter(void 0, void 0, void 0, function* () {
    const addedToolsMessages = {}; //–∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å–∏–≤ key->msgId (–¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ [Delete] btn)
    const searchResultMessages = {};
    const cachedObject = {}; //—Ö—Ä–∞–Ω–∏—Ç –≤–µ—Å—å –ø–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏, –Ω–µ —á–∏—Å—Ç–∏–º 
    let yesNoMsg; //confirmation —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    let addedTools = c.data[msg.chat.id].tools;
    let showFoundedTool = (id, name, desc, photoUrl) => __awaiter(void 0, void 0, void 0, function* () {
        const opts = {
            reply_markup: {
                inline_keyboard: [[{ text: TX_BUTTON_ADD, callback_data: "add_" + id }]]
            },
            // mark_to_remove: true
        };
        if (photoUrl !== '') {
            opts.reply_markup.inline_keyboard[0].push({ text: TX_BUTTON_PHOTO, url: photoUrl });
        }
        const nmsg = yield c.botUI.message(msg, `*${name}*\n${desc}`, opts);
        searchResultMessages[String(id)] = nmsg.message_id;
        cachedObject[String(id)] = { name: name, desc: desc };
    });
    let showAddedTool = (id, name, desc) => __awaiter(void 0, void 0, void 0, function* () {
        const opts = {
            reply_markup: {
                inline_keyboard: [[{ text: TX_BUTTON_DELETE, callback_data: "delete_" + id }]]
            }
        };
        const nmsg = yield c.botUI.message(msg, TX_TOOL + '*' + name + '*' +
            '\n' + desc, opts);
        // –¥–æ–±–∞–≤–ª—è–µ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        addedToolsMessages[String(id)] = nmsg.message_id;
    });
    let showEndMessage = () => __awaiter(void 0, void 0, void 0, function* () {
        const endOpts = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: TX_BUTTON_TOOLS_LIST, url: 'https://docs.google.com/spreadsheets/d/16Z6opmCk2VnXFHraYIqdGhOTT_MJtQwIRHe3KPhNys0/edit?usp=sharing' }],
                    [{ text: editMode ? TX_BUTTON_EDIT_END : TX_BUTTON_END, callback_data: 'end' }]
                ]
            },
            mark_to_remove: true
        };
        yield c.botUI.message(msg, TX_END_MESSAGE, endOpts);
    });
    let clearsearchResultMessagess = () => {
        // –æ—á–∏—Å—Ç–∏–º –≤—Ä—É—á–Ω—É—é —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å–Ω—Ç—Å—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        for (const prop in searchResultMessages) {
            c.botUI.delete(msg, searchResultMessages[prop]);
            delete searchResultMessages[prop];
        }
    };
    c.botUI.context(msg, () => __awaiter(void 0, void 0, void 0, function* () {
        if (!editMode) { // S.–ü–µ—Ä–≤–∏—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            yield c.botUI.message(msg, TX_INITIAL_MESSAGE, { mark_to_remove: true });
            yield showEndMessage();
            yield c.botUI.message(msg, TX_SEARCH_MESSAGE, { mark_to_remove: true });
        }
        else { // S.–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ 
            yield c.botUI.message(msg, TX_INITIAL_MESSAGE_EDIT);
            yield c.botUI.message(msg, TX_SEARCH_MESSAGE, { mark_to_remove: true });
            let tools = yield (0, search_1.GetToolsByIds)(c, c.data[msg.chat.id].tools ? c.data[msg.chat.id].tools : {});
            // –í—ã–≤–æ–¥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.
            for (const o of tools) {
                yield showAddedTool(o.id, o.name, o.desc);
                cachedObject[String(o.id)] = { name: o.name, desc: o.desc };
            }
            yield showEndMessage();
        }
    }), {
        message: (msg) => __awaiter(void 0, void 0, void 0, function* () {
            // S.–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            // –æ—á–∏—Å—Ç–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π            
            c.botUI.deleteAllMarked(msg);
            clearsearchResultMessagess();
            // messagesToRemove = [msg.message_id]
            c.botUI.markToDelete(msg, msg.message_id); //–¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const searchRes = yield (0, search_1.SearchToolsByStr)(c, msg.text);
            if (searchRes.length) {
                yield c.botUI.message(msg, TX_FOUND_1 + searchRes.length + TX_FOUND_2 + SEARCH_LIMIT + TX_FOUND_3, { mark_to_remove: true });
                let cur_i = 0;
                for (let i = 0; i < searchRes.length; i++) {
                    const o = searchRes[i];
                    if (cur_i >= SEARCH_LIMIT)
                        return;
                    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
                    if (addedTools && !addedTools[String(o.id)])
                        yield showFoundedTool(o.id, o.name, o.desc, o.url);
                    cur_i++;
                }
            }
            else {
                yield c.botUI.message(msg, TX_SEARCH_NORESULT, { mark_to_remove: true });
            }
            yield showEndMessage();
        }),
        callback_query: (query) => __awaiter(void 0, void 0, void 0, function* () {
            if (query.data === 'end') { // –ù–∞–∂–∞—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å 
                if (Object.keys(addedTools).length === 0) { // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ   
                    const opts = {
                        reply_markup: {
                            inline_keyboard: [[{ text: TX_BUTTON_CONFIRM, callback_data: 'end-confirmed' },
                                    { text: TX_BUTTON_NOT_CONFIRM, callback_data: 'end-not-confirmed' }]]
                        },
                        mark_to_remove: true
                    };
                    yesNoMsg = yield c.botUI.message(msg, TX_END_CONFIRM_REQUEST, opts);
                }
                else { //  S.S –ó–∞–∫–æ–Ω—á–∏—Ç—å
                    c.data[msg.chat.id].tools = addedTools;
                    c.botUI.deleteAllMarked(msg);
                    clearsearchResultMessagess();
                    // –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏
                    for (const id in addedToolsMessages) {
                        c.botUI.delete(msg, addedToolsMessages[id]);
                        yield c.botUI.message(msg, TX_TOOL + '*' + cachedObject[id].name + '*' +
                            '\n' + cachedObject[id].desc);
                    }
                    end();
                }
                // S. –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            }
            else if (query.data === 'end-confirmed') {
                c.data[msg.chat.id].tools = addedTools;
                yield c.botUI.message(msg, TX_END_CONFIRMED);
                c.botUI.deleteAllMarked(msg);
                clearsearchResultMessagess();
                end();
                // S. –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            }
            else if (query.data === 'end-not-confirmed') {
                // —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                c.botUI.delete(msg, yesNoMsg.message_id);
                yield c.botUI.message(msg, TX_END_NOT_CONFIRMED, { mark_to_remove: true });
            }
            else { //S. –ü—Ä–∏—à–µ–ª ID
                // "add_23"
                // "delete_23
                const type = query.data.split('_')[0];
                const id = query.data.split('_')[1];
                if (type === 'add') { // S.S –ü—Ä–∏—à–µ–ª add_ID
                    // if(addedTools.includes(id)) {
                    //     await c.botUI.message(msg, cachedObject[id].name + TX_EXISTS_2, {mark_to_remove: true})
                    // } else {
                    showAddedTool(id, cachedObject[id].name, cachedObject[id].desc);
                    addedTools[id] = cachedObject[id].name;
                    c.botUI.delete(msg, searchResultMessages[id]);
                    delete searchResultMessages[id];
                    // }  
                }
                else { // S.S –ü—Ä–∏—à–µ–ª delete_ID
                    c.botUI.delete(msg, addedToolsMessages[id]);
                    delete addedToolsMessages[id];
                    if (addedTools[id]) {
                        delete addedTools[id];
                    }
                }
            }
        })
    });
    // end()
});
