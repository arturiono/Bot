import {MainContext, ABReqest} from '../../types/types'

// usersTable - –¥–∞–Ω–Ω—ã–µ –æ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
export function dataToMessage (data:ABReqest, showName?:boolean, usersTable?:any) {

    // %%% –ü–æ–ª—É—á–∏—Ç—å '–û–±—å–µ–∫—Ç—ã' –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –û–±—å–µ–∫—Ç–æ–≤

    let str = ''

    if(showName && usersTable) {

        const ind = usersTable['#'].indexOf(data.user)

        let name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω'
        if(ind !== -1) {
            name = usersTable['–§–ò–û'][ind]
        }
    
        str += name + ' (' + data.user + ')' + '\n'
        str += ' - - - ' + '\n'
    }

    // —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –û—Ç–º–µ–Ω–∞    
    const sticon = data.status === '–û—Ç–º–µ–Ω–∞'? '‚õîÔ∏è' : 
                   data.status === '–°–∫–ª–∞–¥'? '‚úÖ' : 
                   data.status === '–û–±—ä–µ–∫—Ç' ? '‚úÖ' : 
                   data.status === '–°–æ–±—Ä–∞–Ω' ? '‚úÖ' :
                   data.status === '–î–æ—Å—Ç–∞–≤–∫–∞' ? 'üöô' : '‚è±Ô∏è'
    

    if(data.id !== 'Null') 
    str += '# ' + data.id + '\n'
    str += '–°—Ç–∞—Ç—É—Å: '+ sticon +' *' + data.status + '*\n'
    str += '–¢–∏–ø: *' + data.type + '*\n'
    str += '–î–æ—Å—Ç–∞–≤–∫–∞: *' + data.delivery + '*\n'
    str += '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: *' + data.dateTime + '*\n'

    if(data.type !== '–°–≤–æ–±–æ–¥–Ω–∞—è') {

        // %%% –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        const from:String = data.from === '0' ? '–°–∫–ª–∞–¥' : data.from 
        const to:String = data.to === '0' ? '–°–∫–ª–∞–¥' : data.to 
        str += '–¢–æ—á–∫–∞ –ê: *' + from + '*\n'
        str += '–¢–æ—á–∫–∞ B: *' + to + '*\n'

        if(Object.values(data.tools).length !==0)
            str += '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: *' + Object.values(data.tools).map(function(item:any, index:any) {
                const space = index === 0? '' : ' ' 
                return space + item
            }) + '*\n'
        else    
            str += '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: *–Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*\n'

        if(Object.values(data.rashodniki).length !==0)    
            str += '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏: *' + Object.values(data.rashodniki).map(function(item:any, index:any) {
                const space = index === 0? '' : ' ' 
                return space + item.name + ': ' + item.count
            }) + '*\n'
    }

    if (data.comment !== 'Null')
        str += '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *' + data.comment + '*\n'
    
    if (data.dateCreated !== 'Null')
        str += '–°–æ–∑–¥–∞–Ω–∞: ' + data.dateCreated + '\n'
    
    // console.log(str)

    return str

}

export function zayavkaToData(i: number, allZayavkiObj: any) {
    
    let data:ABReqest = {
        id: allZayavkiObj['#'][i],
        dateCreated: allZayavkiObj['–î–∞—Ç–∞ —Å–æ–∑–¥.'][i],
        type: allZayavkiObj['–¢–∏–ø'][i],
        delivery: allZayavkiObj['–î–æ—Å—Ç–∞–≤–∫–∞'][i],
        dateTime: allZayavkiObj['–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è'][i],
        status: allZayavkiObj['–°—Ç–∞—Ç—É—Å'][i],
        user: allZayavkiObj['C–æ—Ç—Ä—É–¥–Ω–∏–∫'][i],
        from: allZayavkiObj['–û–±—ä–µ–∫—Ç A'][i],
        to: allZayavkiObj['–û–±—ä–µ–∫—Ç B'][i],
        tools: JSON.parse(allZayavkiObj['–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'][i]),
        rashodniki: JSON.parse(allZayavkiObj['–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏'][i]),
        comment: allZayavkiObj['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'][i]
    }

    // ['#', '–¢–∏–ø', '–î–æ—Å—Ç–∞–≤–∫–∞', '–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è', '–°—Ç–∞—Ç—É—Å', 'C–æ—Ç—Ä—É–¥–Ω–∏–∫', '–û–±—ä–µ–∫—Ç A', '–û–±—ä–µ–∫—Ç B', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–î–∞—Ç–∞ —Å–æ–∑–¥.', '–î–∞—Ç–∞ –∏–∑–º.'],
    // %% –∑–∞–ø–∏—Å–∞—Ç—å —Å—é–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ —Å –∑–∞—è–≤–∫–∏

    return data
}